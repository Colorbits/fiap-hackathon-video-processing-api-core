type: collection.insomnia.rest/5.0
name: FIAP X
meta:
  id: wrk_a454a9d7607744d0bb7bb839ad39e0ed
  created: 1749934528926
  modified: 1749934528926
  description: ""
collection:
  - name: Video Processing Api Core
    meta:
      id: fld_1be09fdc985e48ff816aaf069fc23064
      created: 1749953078873
      modified: 1751839259449
      sortKey: -1749953137308
      description: ""
    children:
      - name: Users
        meta:
          id: fld_d480e6ac00694b3f80193511b365fc2b
          created: 1749934610094
          modified: 1751839091861
          sortKey: -1749953098809
          description: ""
        children:
          - url: "{{ _.coreApiBaseUrl }}/users"
            name: Register
            meta:
              id: req_51f37856e543458b8ed9c64490d647af
              created: 1749934619221
              modified: 1751825914243
              isPrivate: false
              description: ""
              sortKey: -1749934660760
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "name": "Gabrielo2", 
                  "email": "gabrielo2@gmail.com", 
                  "password": "123456789"
                }
            headers:
              - name: Content-Type
                value: application/json
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              preRequest: |
                const request = JSON.parse(insomnia.request.body);

                console.log('email', request.email);
                console.log('password', request.password);

                insomnia.environment.set("email", request.email);
                insomnia.environment.set("password", request.password);
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                // Salva o ID do usuário para uso em outros requests
                if (response.id) {
                  insomnia.environment.set("userId", response.id);
                }
                
                // Testes formais usando a biblioteca de testes do Insomnia
                insomnia.test('Status code deve ser 201 (Created) ou 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.be.oneOf([200, 201]);
                });
                
                insomnia.test('Resposta deve conter um ID de usuário', () => {
                  insomnia.expect(response).to.have.property('id');
                  insomnia.expect(response.id).to.not.be.empty;
                });
                
                insomnia.test('Email no response deve corresponder ao email enviado', () => {
                  insomnia.expect(response.email).to.equal(insomnia.environment.get("email"));
                });
                
                insomnia.test('Resposta deve conter campos obrigatórios do usuário', () => {
                  insomnia.expect(response).to.have.property('id');
                  insomnia.expect(response).to.have.property('name');
                  insomnia.expect(response).to.have.property('email');
                  insomnia.expect(response).to.not.have.property('password');
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{ _.coreApiBaseUrl }}/users/{{ _.userId }}"
            name: Get User
            meta:
              id: req_1adf8d86b60e4680b5123e2d902f7a4a
              created: 1749934740828
              modified: 1751599879599
              isPrivate: false
              description: ""
              sortKey: -1749934660735
            method: GET
            headers:
              - name: User-Agent
                value: insomnia/11.2.0
            authentication:
              type: bearer
              token: "{{ _.token }}"
            scripts:
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                insomnia.test('Status code deve ser 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.equal(200);
                });
                
                insomnia.test('ID do usuário deve corresponder ao solicitado', () => {
                  insomnia.expect(response).to.have.property('id');
                  insomnia.expect(response.id.toString()).to.equal(insomnia.environment.get("userId"));
                });
                
                insomnia.test('Resposta deve conter campos obrigatórios do usuário', () => {
                  insomnia.expect(response).to.have.property('id');
                  insomnia.expect(response).to.have.property('name');
                  insomnia.expect(response).to.have.property('email');
                  insomnia.expect(response).to.not.have.property('password');
                });
                const requiredFields = ['id', 'name', 'email'];
                const missingFields = requiredFields.filter(field => !response[field]);
                
                if (missingFields.length === 0) {
                  console.log('[TEST PASSED] All required fields present');
                } else {
                  console.error(`[TEST FAILED] Missing fields: ${missingFields.join(', ')}`);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Videos
        meta:
          id: fld_3d26966b39cc4ca08080bf110202940a
          created: 1749934614683
          modified: 1751839259449
          sortKey: -1749953098709
          description: ""
        children:
          - url: "{{coreApiBaseUrl}}/videos/{{ _.userId }}"
            name: Create Video
            meta:
              id: req_5a06285a7179446ca62e7b8ffb83873a
              created: 1749934793923
              modified: 1751683565933
              isPrivate: false
              description: ""
              sortKey: -1749934793923
            method: POST
            body:
              mimeType: multipart/form-data
              params:
                - id: pair_63e8d962e0004f7298785bbbc16c5c9d
                  name: file
                  value: ""
                  description: ""
                  disabled: false
                  type: file
                  multiline: true
                  fileName: /Users/gabrielumbelino/Downloads/large.mp4
            headers:
              - name: Content-Type
                value: multipart/form-data
              - name: User-Agent
                value: insomnia/11.2.0
            authentication:
              type: bearer
              token: "{{ _.token }}"
            scripts:
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                // Salvar o UUID do vídeo para uso em outras requisições
                if (response.uuid) {
                  insomnia.environment.set("videoUuid", response.uuid);
                }
                
                insomnia.test('Status code deve ser 201 (Created) ou 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.be.oneOf([200, 201]);
                });
                
                insomnia.test('Resposta deve conter um UUID de vídeo', () => {
                  insomnia.expect(response).to.have.property('uuid');
                  insomnia.expect(response.uuid).to.be.a('string').that.is.not.empty;
                });
                
                insomnia.test('UserId deve corresponder ao usuário autenticado', () => {
                  const userId = insomnia.environment.get("userId");
                  insomnia.expect(response).to.have.property('userId');
                  insomnia.expect(response.userId.toString()).to.equal(userId);
                });
                
                insomnia.test('Resposta deve conter todos os campos obrigatórios', () => {
                  const requiredFields = ['uuid', 'userId', 'name', 'extension', 'path', 'status'];
                  requiredFields.forEach(field => {
                    insomnia.expect(response).to.have.property(field);
                  });
                });
                
                insomnia.test('Status do vídeo deve ser válido', () => {
                  const validStatuses = ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED'];
                  insomnia.expect(validStatuses).to.include(response.status);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{ _.coreApiBaseUrl}}/videos"
            name: Get Videos
            meta:
              id: req_07228d6ffb444e5fb0189a0ad07ff398
              created: 1749936153598
              modified: 1751825894885
              isPrivate: false
              description: ""
              sortKey: -1749934727341.5
            method: GET
            headers:
              - name: User-Agent
                value: insomnia/11.2.0
            authentication:
              type: bearer
              token: "{{ _.token }}"
            scripts:
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                insomnia.test('Status code deve ser 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.equal(200);
                });
                
                insomnia.test('Resposta deve ser um array de vídeos', () => {
                  insomnia.expect(response).to.be.an('array');
                });
                
                if (response.length > 0) {
                  insomnia.test('Vídeo criado anteriormente deve estar na lista', () => {
                    const videoUuid = insomnia.environment.get("videoUuid");
                    if (videoUuid) {
                      const foundVideo = response.find(video => video.uuid === videoUuid);
                      if (foundVideo) {
                        insomnia.expect(foundVideo).to.not.be.undefined;
                      } else {
                        // Este é apenas um teste condicional, não falha se o vídeo não for encontrado
                        // porque pode haver casos onde o vídeo não está na lista
                        console.log(`[INFO] Video com UUID ${videoUuid} não encontrado na lista`);
                      }
                    }
                  });
                  
                  insomnia.test('Vídeos devem conter todos os campos obrigatórios', () => {
                    const firstVideo = response[0];
                    const requiredFields = ['uuid', 'userId', 'name', 'extension', 'path', 'status'];
                    requiredFields.forEach(field => {
                      insomnia.expect(firstVideo).to.have.property(field);
                    });
                  });
                  
                  insomnia.test('Status dos vídeos deve ser válido', () => {
                    const validStatuses = ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED'];
                    response.forEach(video => {
                      insomnia.expect(validStatuses).to.include(video.status);
                    });
                  });
                }
                } else {
                  console.error('[TEST FAILED] Response is not an array of videos');
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Auth
        meta:
          id: fld_87f29b2125474f8bb8f00a7dd6d35740
          created: 1751244889204
          modified: 1751839244967
          sortKey: -1751244889204
          description: ""
        children:
          - url: "{{ _.coreApiBaseUrl }}/auth/login"
            name: Login
            meta:
              id: req_62ee6ebef45e43aa99b868d83f739eff
              created: 1749934668683
              modified: 1751807964102
              isPrivate: false
              description: ""
              sortKey: -1751244910722
            method: POST
            body:
              mimeType: application/json
              text: |
                {
                  "email": "{{ _.email }}", 
                  "password": "{{ _.password }}"
                }
            headers:
              - name: Content-Type
                value: application/json
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                // Salvar tokens para uso em outras requisições
                if (response.token) {
                  insomnia.environment.set("token", response.token);
                }
                
                if (response.refreshToken) {
                  insomnia.environment.set("refreshToken", response.refreshToken);
                }
                
                if (response.user && response.user.id) {
                  insomnia.environment.set("userId", response.user.id);
                }
                
                // Testes usando biblioteca do Insomnia
                insomnia.test('Status code deve ser 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.equal(200);
                });
                
                insomnia.test('Resposta deve conter um token JWT', () => {
                  insomnia.expect(response).to.have.property('token');
                  insomnia.expect(response.token).to.be.a('string').that.is.not.empty;
                  // Verificar formato de JWT (xxx.yyy.zzz)
                  insomnia.expect(response.token.split('.')).to.have.lengthOf(3);
                });
                
                insomnia.test('Resposta deve conter um refresh token', () => {
                  insomnia.expect(response).to.have.property('refreshToken');
                  insomnia.expect(response.refreshToken).to.be.a('string').that.is.not.empty;
                });
                
                insomnia.test('Resposta deve conter data de expiração', () => {
                  insomnia.expect(response).to.have.property('expiresAt');
                  
                  // Verificar se a data de expiração está no futuro
                  const expiresAt = new Date(response.expiresAt);
                  const now = new Date();
                  insomnia.expect(expiresAt).to.be.above(now);
                });
                  insomnia.environment.set("expiresAt", response.expiresAt);
                  
                  // Verifica se a data de expiração está no futuro
                  const expiresAt = new Date(response.expiresAt);
                  const now = new Date();
                  if (expiresAt > now) {
                    console.log('[TEST PASSED] Token expiration is in the future');
                  } else {
                    console.error('[TEST FAILED] Token has already expired');
                  }
                } else {
                  console.error('[TEST FAILED] Expiration date not found in response');
                }
                
                // Verifica se os dados do usuário foram retornados
                if (response.user) {
                  console.log('[TEST PASSED] User data returned');
                  
                  if (response.user.id) {
                    console.log(`[TEST PASSED] User ID: ${response.user.id}`);
                    insomnia.environment.set("userId", response.user.id);
                  }
                } else {
                  console.error('[TEST FAILED] User data not found in response');
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
  - name: Image Upload Service
    meta:
      id: fld_b87bb984fdb24f17aab4e2c6df8bc2c9
      created: 1749953137208
      modified: 1751506221464
      sortKey: -1749953137283
      description: ""
    children:
      - name: images
        meta:
          id: fld_8f799c36d5734a4398006b4cb31eab29
          created: 1749953161714
          modified: 1751506221464
          sortKey: -1749953165846
          description: ""
        children:
          - url: "{{ _.imageUploadBaseUrl }}/images/{{ _.imageUuid }}"
            name: get Image
            meta:
              id: req_38f92cc9772a4781b680377d915d9f3d
              created: 1749953214950
              modified: 1751839305542
              isPrivate: false
              description: ""
              sortKey: -1749953223746
            method: GET
            headers:
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              afterResponse: |
                const contentType = insomnia.response.headers['content-type'] || '';
                const responseSize = insomnia.response.bodyBytes?.byteLength || 0;
                
                insomnia.test('Status code deve ser 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.equal(200);
                });
                
                insomnia.test('Content-Type deve ser de uma imagem', () => {
                  insomnia.expect(contentType).to.match(/^image\//);
                });
                
                insomnia.test('Resposta deve conter dados da imagem', () => {
                  insomnia.expect(responseSize).to.be.above(0);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{ _.imageUploadBaseUrl }}/images/{{ _.videoUuid }}"
            name: upload Image
            meta:
              id: req_0ac654d9046d4928a233ba2db97a7701
              created: 1749953434851
              modified: 1751503972967
              isPrivate: false
              description: ""
              sortKey: -1749953434851
            method: POST
            body:
              mimeType: multipart/form-data
              params:
                - id: pair_7222d6ba7a1b430a892c97d79cbbe1fc
                  name: file
                  value: ""
                  description: ""
                  disabled: false
                  type: file
                  fileName: /Users/gabrielumbelino/Downloads/DSC_0058.JPG
            headers:
              - name: Content-Type
                value: multipart/form-data
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                // Salvar o UUID da imagem para uso em outras requisições
                if (response.uuid) {
                  insomnia.environment.set("imageUuid", response.uuid);
                }
                
                insomnia.test('Status code deve ser 201 (Created) ou 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.be.oneOf([200, 201]);
                });
                
                insomnia.test('Resposta deve conter um UUID de imagem', () => {
                  insomnia.expect(response).to.have.property('uuid');
                  insomnia.expect(response.uuid).to.be.a('string').that.is.not.empty;
                });
                
                insomnia.test('VideoUuid deve corresponder ao fornecido', () => {
                  const videoUuid = insomnia.environment.get("videoUuid");
                  insomnia.expect(response).to.have.property('videoUuid');
                  insomnia.expect(response.videoUuid).to.equal(videoUuid);
                });
                
                insomnia.test('Resposta deve conter todos os campos obrigatórios', () => {
                  const requiredFields = ['uuid', 'videoUuid', 'name', 'path', 'createdAt'];
                  requiredFields.forEach(field => {
                    insomnia.expect(response).to.have.property(field);
                  });
                });
                
                insomnia.test('Caminho da imagem deve ser válido', () => {
                  insomnia.expect(response.path).to.be.a('string').that.is.not.empty;
                });

            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: VideoZip
        meta:
          id: fld_5a30d3f9bd5f4e98abac4d8346bd80cc
          created: 1749953205143
          modified: 1750699751256
          sortKey: -1749953205143
          description: ""
        children:
          - url: "{{ _.imageUploadBaseUrl }}/video-zip/{{ _.videoUuid }}"
            name: get video zip
            meta:
              id: req_6dce53deb75f4db89289753a774a6585
              created: 1750117521650
              modified: 1751678292406
              isPrivate: false
              description: ""
              sortKey: -1750117521650
            method: GET
            headers:
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              afterResponse: |
                insomnia.test('Status code deve ser 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.equal(200);
                });
                
                try {
                  // Tenta analisar a resposta como JSON (metadados do zip)
                  const response = JSON.parse(insomnia.response.body);
                  
                  insomnia.test('VideoUuid deve corresponder ao fornecido', () => {
                    const videoUuid = insomnia.environment.get("videoUuid");
                    insomnia.expect(response).to.have.property('videoUuid');
                    insomnia.expect(response.videoUuid).to.equal(videoUuid);
                  });
                  
                  insomnia.test('Resposta deve incluir status', () => {
                    insomnia.expect(response).to.have.property('status');
                    const validStatuses = ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELED'];
                    insomnia.expect(validStatuses).to.include(response.status);
                  });
                  
                  insomnia.test('Resposta deve conter todos os campos obrigatórios', () => {
                    const requiredFields = ['uuid', 'videoUuid', 'status', 'createdAt', 'updatedAt'];
                    requiredFields.forEach(field => {
                      insomnia.expect(response).to.have.property(field);
                    });
                  });
                } catch (error) {
                  // Teste para quando a resposta é um arquivo ZIP
                  const contentType = insomnia.response.headers['content-type'] || '';
                  const responseSize = insomnia.response.bodyBytes?.byteLength || 0;
                  
                  insomnia.test('Content-Type deve ser de um arquivo ZIP', () => {
                    insomnia.expect(contentType).to.be.oneOf(['application/zip', 'application/octet-stream']);
                  });
                  
                  insomnia.test('Arquivo ZIP deve conter dados', () => {
                    insomnia.expect(responseSize).to.be.above(0);
                  });
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{ _.imageUploadBaseUrl }}/video-zip"
            name: create video zip
            meta:
              id: req_143dfc082e514acaa29368c272b0c944
              created: 1750117571176
              modified: 1751678856451
              isPrivate: false
              description: ""
              sortKey: -1750117571176
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                	"videoUuid": "{{ _.videoUuid }}"
                }
            headers:
              - name: Content-Type
                value: application/json
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                insomnia.test('Status code deve ser 201 (Created) ou 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.be.oneOf([200, 201]);
                });
                
                insomnia.test('Resposta deve conter um UUID de zip', () => {
                  insomnia.expect(response).to.have.property('uuid');
                  insomnia.expect(response.uuid).to.be.a('string').that.is.not.empty;
                });
                
                insomnia.test('VideoUuid deve corresponder ao fornecido', () => {
                  const videoUuid = insomnia.environment.get("videoUuid");
                  insomnia.expect(response).to.have.property('videoUuid');
                  insomnia.expect(response.videoUuid).to.equal(videoUuid);
                });
                
                insomnia.test('Status inicial deve ser PENDING', () => {
                  insomnia.expect(response).to.have.property('status');
                  insomnia.expect(response.status).to.equal('PENDING');
                });
                
                insomnia.test('Resposta deve conter todos os campos obrigatórios', () => {
                  const requiredFields = ['uuid', 'videoUuid', 'status', 'createdAt', 'updatedAt'];
                  requiredFields.forEach(field => {
                    insomnia.expect(response).to.have.property(field);
                  });
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{ _.imageUploadBaseUrl }}/video-zip/{{ _.videoUuid }}"
            name: update video zip
            meta:
              id: req_f6eb648660cd4ca6b38429b510cb24ec
              created: 1750121350235
              modified: 1750702265468
              isPrivate: false
              description: ""
              sortKey: -1750117546413
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                	"status": "CANCELED"
                }
            headers:
              - name: Content-Type
                value: application/json
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                insomnia.test('Status code deve ser 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.equal(200);
                });
                
                insomnia.test('VideoUuid deve corresponder ao fornecido', () => {
                  const videoUuid = insomnia.environment.get("videoUuid");
                  insomnia.expect(response).to.have.property('videoUuid');
                  insomnia.expect(response.videoUuid).to.equal(videoUuid);
                });
                
                insomnia.test('Status deve ter sido atualizado para CANCELED', () => {
                  insomnia.expect(response).to.have.property('status');
                  insomnia.expect(response.status).to.equal('CANCELED');
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{ _.imageUploadBaseUrl }}/video-zip/{{ _.videoUuid }}/images"
            name: get video zip images
            meta:
              id: req_394898a746bc4e0d9370ae341036ef1d
              created: 1750121498024
              modified: 1751240911380
              isPrivate: false
              description: ""
              sortKey: -1750035478250.5
            method: GET
            headers:
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              afterResponse: |
                const response = JSON.parse(insomnia.response.body);
                
                insomnia.test('Status code deve ser 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.equal(200);
                });
                
                insomnia.test('Resposta deve ser um array', () => {
                  insomnia.expect(response).to.be.an('array');
                });
                
                if (response.length > 0) {
                  insomnia.test('Imagens devem ter todos os campos obrigatórios', () => {
                    const firstImage = response[0];
                    const requiredFields = ['uuid', 'videoUuid', 'name', 'path', 'createdAt'];
                    requiredFields.forEach(field => {
                      insomnia.expect(firstImage).to.have.property(field);
                    });
                  });
                  
                  insomnia.test('VideoUuid das imagens deve corresponder ao fornecido', () => {
                    const videoUuid = insomnia.environment.get("videoUuid");
                    response.forEach(image => {
                      insomnia.expect(image.videoUuid).to.equal(videoUuid);
                    });
                  });
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{ _.imageUploadBaseUrl }}/video-zip/{{ _.videoUuid }}/zip"
            name: get video zip images zipped file
            meta:
              id: req_c0f14e5478144fd88417f50354c6e29b
              created: 1751805901225
              modified: 1751805934809
              isPrivate: false
              description: ""
              sortKey: -1749994456550.75
            method: GET
            headers:
              - name: User-Agent
                value: insomnia/11.2.0
            scripts:
              afterResponse: |
                const contentType = insomnia.response.headers['content-type'] || '';
                const responseSize = insomnia.response.bodyBytes?.byteLength || 0;
                
                insomnia.test('Status code deve ser 200 (OK)', () => {
                  insomnia.expect(insomnia.response.statusCode).to.equal(200);
                });
                
                insomnia.test('Content-Type deve ser de um arquivo ZIP', () => {
                  insomnia.expect(contentType).to.be.oneOf(['application/zip', 'application/octet-stream']);
                });
                
                insomnia.test('Arquivo ZIP deve conter dados', () => {
                  insomnia.expect(responseSize).to.be.above(0);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
  - name: Notification Service
    meta:
      id: fld_a8dfc2e3b79f441aac246cacb3491355
      created: 1751334446184
      modified: 1751336136498
      sortKey: -1749953137258
      description: ""
    children:
      - url: "{{ _.notificationBaseUrl }}/notifications"
        name: Create Notification
        meta:
          id: req_0f01de1b56ec454b90e78682f2077cf5
          created: 1751334461785
          modified: 1751336021249
          isPrivate: false
          description: ""
          sortKey: -1751334490532
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
            	"videoUuid": "{{ _.videoUuid }}",
            	"videoName": "test-video.mp4",
            	"userId": "{{ _.userId }}",
            	"userName": "Teste User",
            	"email": "{{ _.email }}",
            	"error": "Error processing video - test notification"
            }
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          afterResponse: |
            const response = JSON.parse(insomnia.response.body);
            
            // Salvar ID da notificação para uso em outras requisições
            if (response.id) {
              insomnia.environment.set("notificationId", response.id);
            }
            
            insomnia.test('Status code deve ser 201 (Created) ou 200 (OK)', () => {
              insomnia.expect(insomnia.response.statusCode).to.be.oneOf([200, 201]);
            });
            
            insomnia.test('Resposta deve conter ID da notificação', () => {
              insomnia.expect(response).to.have.property('id');
              insomnia.expect(response.id).to.not.be.empty;
            });
            
            insomnia.test('Resposta deve conter todos os campos obrigatórios', () => {
              const requiredFields = ['id', 'videoUuid', 'videoName', 'userId', 'userName', 'email', 'createdAt'];
              requiredFields.forEach(field => {
                insomnia.expect(response).to.have.property(field);
              });
            });
            
            insomnia.test('Dados da notificação devem corresponder aos enviados', () => {
              const requestData = JSON.parse(insomnia.request.body);
              insomnia.expect(response.videoUuid).to.equal(requestData.videoUuid);
              insomnia.expect(response.videoName).to.equal(requestData.videoName);
              insomnia.expect(response.userId).to.equal(requestData.userId);
            });
            if (response.success === true) {
              console.log('[TEST PASSED] Success flag is true');
            } else {
              console.error('[TEST FAILED] Success flag is not true');
            }
            
            // Verifica se os dados da notificação foram retornados
            if (response.data) {
              console.log('[TEST PASSED] Notification data returned');
              
              // Verifica o ID da notificação
              if (response.data.id) {
                console.log(`[TEST PASSED] Notification ID: ${response.data.id}`);
                insomnia.environment.set("notificationId", response.data.id);
              } else {
                console.error('[TEST FAILED] Notification ID not found');
              }
              
              // Verifica o UUID do vídeo
              const videoUuid = insomnia.environment.get("videoUuid");
              if (response.data.videoUuid === videoUuid) {
                console.log('[TEST PASSED] Video UUID matches');
              } else {
                console.error('[TEST FAILED] Video UUID mismatch');
              }
              
              // Verifica o status da notificação
              if (response.data.status === 'SENT' || response.data.status === 'PENDING') {
                console.log(`[TEST PASSED] Notification status: ${response.data.status}`);
              } else {
                console.error(`[TEST FAILED] Unexpected notification status: ${response.data.status}`);
              }
            } else {
              console.error('[TEST FAILED] Notification data not found in response');
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.notificationBaseUrl }}/notifications"
        name: Get Notifications
        meta:
          id: req_5d1d613868374fd492c6dc4e9b53f774
          created: 1751336157326
          modified: 1751681118937
          isPrivate: false
          description: ""
          sortKey: -1751289700627
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          afterResponse: |
            const response = JSON.parse(insomnia.response.body);
            
            insomnia.test('Status code deve ser 200 (OK)', () => {
              insomnia.expect(insomnia.response.statusCode).to.equal(200);
            });
            
            insomnia.test('Resposta deve ser um array', () => {
              insomnia.expect(response).to.be.an('array');
            });
            
            if (response.length > 0) {
              insomnia.test('Notificações devem conter todos os campos obrigatórios', () => {
                const firstNotification = response[0];
                const requiredFields = ['id', 'videoUuid', 'videoName', 'userId', 'userName', 'email', 'createdAt'];
                requiredFields.forEach(field => {
                  insomnia.expect(firstNotification).to.have.property(field);
                });
              });
              
              // Tenta encontrar a notificação criada anteriormente
              const notificationId = insomnia.environment.get("notificationId");
              if (notificationId) {
                insomnia.test('Notificação criada anteriormente deve estar presente', () => {
                  const foundNotification = response.find(notification => notification.id == notificationId);
                  if (foundNotification) {
                    insomnia.expect(foundNotification).to.not.be.undefined;
                  }
                });
              }
            }
            // Verifica se a resposta indica sucesso
            if (response.success === true) {
              console.log('[TEST PASSED] Success flag is true');
            } else {
              console.error('[TEST FAILED] Success flag is not true');
            }
            
            // Verifica se há uma lista de notificações
            if (Array.isArray(response.data)) {
              console.log(`[TEST PASSED] Notifications array returned with ${response.data.length} items`);
              
              // Verifica se a contagem corresponde ao número de notificações
              if (response.count === response.data.length) {
                console.log(`[TEST PASSED] Count matches array length: ${response.count}`);
              } else {
                console.error(`[TEST FAILED] Count (${response.count}) doesn't match array length (${response.data.length})`);
              }
              
              // Se houver notificações, verifica se a notificação criada anteriormente está presente
              if (response.data.length > 0) {
                const notificationId = insomnia.environment.get("notificationId");
                const foundNotification = response.data.find(notification => notification.id == notificationId);
                
                if (foundNotification) {
                  console.log(`[TEST PASSED] Found the created notification with ID: ${notificationId}`);
                } else {
                  console.log(`[TEST INFO] Created notification with ID ${notificationId} not found in the list`);
                }
                
                // Verifica se as notificações têm a estrutura correta
                const firstNotification = response.data[0];
                const requiredFields = ['id', 'uuid', 'videoUuid', 'userId', 'email', 'status'];
                const missingFields = requiredFields.filter(field => firstNotification[field] === undefined);
                
                if (missingFields.length === 0) {
                  console.log('[TEST PASSED] Notification objects have all required fields');
                } else {
                  console.error(`[TEST FAILED] Notification objects missing fields: ${missingFields.join(', ')}`);
                }
              }
            } else {
              console.error('[TEST FAILED] Response data is not an array of notifications');
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.notificationBaseUrl }}/notifications/1"
        name: Get Notifications by userId
        meta:
          id: req_f538c5e42836421889e9a20d32dcc069
          created: 1751336560030
          modified: 1751336571550
          isPrivate: false
          description: ""
          sortKey: -1751267305674.5
        method: GET
        body:
          mimeType: application/json
          text: |-
            {
            	"videoUuid": "2e62679d-b2f6-492c-95a5-d21f71adca63",
            	"videoName": "large-a722.mp4",
            	"userId": "1",
            	"userName": "Gabrielo",
            	"email": "gabrielo@gmail.com",
            	"error": "Error processing video",
            	"date": "30-06-2025",
            	"status": "PENDING"
            }
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          afterResponse: |
            const response = JSON.parse(insomnia.response.body);
            
            insomnia.test('Status code deve ser 200 (OK)', () => {
              insomnia.expect(insomnia.response.statusCode).to.equal(200);
            });
            
            insomnia.test('Resposta deve ser um array', () => {
              insomnia.expect(response).to.be.an('array');
            });
            
            if (response.length > 0) {
              insomnia.test('Notificações devem conter todos os campos obrigatórios', () => {
                const firstNotification = response[0];
                const requiredFields = ['id', 'videoUuid', 'videoName', 'userId', 'userName', 'email', 'createdAt'];
                requiredFields.forEach(field => {
                  insomnia.expect(firstNotification).to.have.property(field);
                });
              });
              
              insomnia.test('Todas as notificações devem ter o userId correto', () => {
                response.forEach(notification => {
                  insomnia.expect(notification.userId).to.equal("1");
                });
              });
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.notificationBaseUrl }}/notifications/video/{{ _.videoUuid }}"
        name: Get Notifications by videoUuid
        meta:
          id: req_15ebe54ea1b0447c89867aedfcab4597
          created: 1751336621812
          modified: 1751336626675
          isPrivate: false
          description: ""
          sortKey: -1751256108198.25
        method: GET
        body:
          mimeType: application/json
          text: |-
            {
            	"videoUuid": "{{ _.videoUuid }}",
            	"videoName": "large-a722.mp4",
            	"userId": "1",
            	"userName": "Gabrielo",
            	"email": "gabrielo@gmail.com",
            	"error": "Error processing video",
            	"date": "30-06-2025",
            	"status": "PENDING"
            }
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          afterResponse: |
            const response = JSON.parse(insomnia.response.body);
            
            insomnia.test('Status code deve ser 200 (OK)', () => {
              insomnia.expect(insomnia.response.statusCode).to.equal(200);
            });
            
            insomnia.test('Resposta deve ser um array', () => {
              insomnia.expect(response).to.be.an('array');
            });
            
            if (response.length > 0) {
              insomnia.test('Notificações devem conter todos os campos obrigatórios', () => {
                const firstNotification = response[0];
                const requiredFields = ['id', 'videoUuid', 'videoName', 'userId', 'userName', 'email', 'createdAt'];
                requiredFields.forEach(field => {
                  insomnia.expect(firstNotification).to.have.property(field);
                });
              });
              
              const videoUuid = insomnia.environment.get("videoUuid");
              
              insomnia.test('Todas as notificações devem ter o videoUuid correto', () => {
                response.forEach(notification => {
                  insomnia.expect(notification.videoUuid).to.equal(videoUuid);
                });
              });
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
cookieJar:
  name: Default Jar
  meta:
    id: jar_97dc29121a6dd68cad647a8bea79344d98fd5ff7
    created: 1749934528930
    modified: 1751839259447
environments:
  name: Base Environment
  meta:
    id: env_97dc29121a6dd68cad647a8bea79344d98fd5ff7
    created: 1749934528928
    modified: 1751839259448
    isPrivate: false
  data:
    coreApiBaseUrl: k8s-fiap-svcvideo-067737d247-96aa2011a43e3bd0.elb.us-east-2.amazonaws.com:8080
    imageUploadBaseUrl: k8s-fiap-svcimage-396363a137-54b1485534d2f6e3.elb.us-east-2.amazonaws.com:8081
    notificationBaseUrl: k8s-fiap-svcnotif-9e19d8d8a9-bda8b55517d734e0.elb.us-east-2.amazonaws.com:8082
    userId: "4"
    viudeoUuid: 60ac0ec0-84d6-4e06-96ca-0c0c1ae7886c
    videoUuid: 020ab2ff-8bd1-4545-8c35-1fc0d960b059
    imageUuid: 6865dd2d73fd8586cfbb3ada
    email: gabrielo2@gmail.com
    password: "123456789"
    token: 5516ffb377e5c99b5b987d9f68ec53e3ecd7d6aa086a85fea1fdad5a13553eb3
    refreshToken: 135b1fd583a5c971e6d4b191ea54cb8c14a21b3768bc0eeb30710c30dc731af0
    expiresAt: 2025-07-07T22:00:44.629Z
