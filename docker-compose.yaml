volumes:
  db_data:
  videos_data:
  images_data:
networks:
  internal:
services:
  api-core:
    build:

      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT}:${PORT}"
    environment:
      PORT: "${PORT}"
      ENV: "${ENV}"
      POSTGRES_HOST: db
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DATABASE: "${POSTGRES_DATABASE}"
      IMAGE_UPLOAD_SERVICE_URL: "${IMAGE_UPLOAD_SERVICE_URL}"
      NOTIFICATION_SERVICE_URL: "${NOTIFICATION_SERVICE_URL}"
      USE_FFPROBE: "true"
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - videos_data:/usr/src/app/files/videos
      - images_data:/usr/src/app/files/images
    depends_on:
      db:
        condition: service_healthy
      image-upload-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s
      
  image-upload-service:
    # Em vez de fazer o build aqui, apenas definimos o serviço para ser acessível
    image: fiap-hackathon-image-upload-service:latest
    ports:
      - "3001:3001"
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
  db:
    image: postgres:17-alpine3.20
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRES_DATABASE}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGPORT: "${POSTGRES_PORT}"
    # Se você quer acessar o banco de dados por uma ferramenta externa, descomente as duas linhas seguintes para exportar o
    # postgres na porta 5432 do host (ou ajuste a porta que deseja mapear do host).
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - internal
    volumes:
      # Monta volume para a pasta de dados do postgresql.
      - db_data:/var/lib/postgresql/data
    # Define health check quer verifica se o banco de dados está pronto para receber requisições.
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}'" ]
      interval: 10s
      timeout: 3s
      retries: 3

